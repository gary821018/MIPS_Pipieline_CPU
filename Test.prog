//Bubble sort
@0000_0000
001_000_00000_00001_00000_00000_001010	// Sort : ADDI $r1, $r0, 10		(r1 = length-1)
@0000_0001
001_000_00000_00110_00000_00000_000000	// ADDI $r6, $r0, 0			(r6 = loop index)
@0000_0002
001_000_00000_00101_00000_00000_000000	// ADDI $r5, $r0, 0			(r5 = index)
@0000_0003
000_100_00001_00110_00000_00000_001111	// Loop : BEQ $r1, $r6, RESULT 
@0000_0004
000_100_00001_00101_00000_00000_001100	// Loopi : BEQ $r1, $r5, RESULT 
@0000_0005
100_011_00101_00010_00000_00000_000000  // LW $r2, 0($r5) 
@0000_0006
001_000_00101_00101_00000_00000_000001	// ADDI $r5, $r5, 1
@0000_0007
100_011_00101_00011_00000_00000_000000  // LW $r3, 0($r5) 
@0000_0008
001_001_00101_00101_00000_00000_000001	// SUBI $r5, $r5, 1
@0000_0009
000_000_00010_00011_00100_00000_000011  // SLT $r4,$r2,$r3 
@0000_000a
000_100_00000_00100_00000_00000_000010	// BEQ $r0, $r4
@0000_000b
001_000_00101_00101_00000_00000_000001	// ADDI $r5, $r5, 1
@0000_000c
000_011_00000_00000_00000_00000_000100	// j Loopi
@0000_000d
101_011_00101_00011_00000_00000_000000 	// SW r3,0(r5)
@0000_000e
001_000_00101_00101_00000_00000_000001	// ADDI $r5, $r5, 1
@0000_000f
101_011_00101_00010_00000_00000_000000 	// SW r2,0(r5)
@0000_0010
000_011_00000_00000_00000_00000_000100	// j Loopi
@0000_0011
001_000_00110_00110_00000_00000_000001	// ADDI $r6, $r6, 1
@0000_0012
000_011_00000_00000_00000_00000_000010	// j Loop
@0000_0013
111_111_00000_00000_00000_00000_000000	// RESULT: NOP

//Fib
@0000_0014
001_000_00000_00001_00000_00000_001001	// Fib : ADDI $r1, $r0, 9		(r1 = length-1)
@0000_0015
001_000_00000_00101_00000_00000_000000	// ADDI $r5, $r0, 0			    (r5 = index)
@0000_0016
001_000_00000_00100_00000_00000_000000	// ADDI $r4, $r0, 0 (move $r4, 0)	(r4 = ans)
@0000_0017
101_011_00101_00100_00000_00000_000000 	// SW r4,0(r5)
@0000_0018
001_000_00101_00101_00000_00000_000001	// ADDI $r5, $r5, 1
@0000_0019
000_100_00001_00100_00000_00000_001100	// BEQ $r1, $r4, RESULT 
@0000_001a
001_000_00000_00100_00000_00000_000001	// ADDI $r4, $r0, 1 (move $r4, 1)
@0000_001b
101_011_00101_00100_00000_00000_000000 	// SW r4,0(r5)
@0000_001c
000_100_00001_00100_00000_00000_001001	// BEQ $r4, $r1, RESULT 
@0000_001d
001_000_00000_00010_00000_00000_000000	// ADDI $r2, $r0, 0
@0000_001e
001_000_00000_00011_00000_00000_000001	// ADDI $r3, $r0, 1
@0000_001f
000_100_00001_00101_00000_00000_000110	// Loop: BEQ $r5, $r1, RESULT 
@0000_0020
001_000_00101_00101_00000_00000_000001	// ADDI $r5, $r5, 1
@0000_0021
000_000_00010_00011_00100_00000_000001	// ADD $r4, $r2, $r3		
@0000_0022
101_011_00101_00100_00000_00000_000000 	// SW r4,0(r5)
@0000_0023
000_000_00000_00011_00010_00000_000001	// ADD $r2, $r0, $r3 (move $r2, $r3)
@0000_0024
000_000_00000_00100_00011_00000_000001	// ADD $r3, $r0, $r4 (move $r3, $r4)
@0000_0025
000_011_00000_00000_00000_00000_011111	// j Loop
@0000_0026
111_111_00000_00000_00000_00000_000000	// RESULT: NOP, result stored in $r4

@0000_0027
100011_00000_00001_0000000000000001 // LW R1,1(R0) r1=9
@0000_0028
100011_00000_00010_0000000000000010 // LW R2,2(R0) r2=2@0000_0029
100011_00000_00011_0000000000000011 // LW R3,3(R0) r3=11
@0000_002a
000000_00001_00010_00100_00000_000001 //add r4,r1,r2 expect 11
@0000_002b
000000_00001_00010_00101_00000_000010 //sub r5,r1,r2 expect 7
@0000_002c
000000_00010_00001_00110_00000_000011 //slt r6,r2,r1 expect r6=1
@0000_002d
000000_00001_00010_00111_00000_000100 //and r7,r1,r2 expect r7=0
@0000_002e
000000_00001_00010_01000_00000_000101 //xor r8,r1,r2 expect r8=1011=11
@0000_002f
000000_00001_00010_01001_00000_000110 //or r9,r1,r2 expect r9=1011=11
@0000_0030
101011_00000_00100_0000000000000111 //SW r4,7(R0)
@0000_0031
001000_00001_01010_0000000000001011 //ADDI r10,r1,11  expect r10=20
@0000_0032
000000_00010_01010_01011_00000_000001 //ADD r11,r2,r10 forwaring I,expect r11=22
@0000_0033
000000_00011_01010_01100_00000_000001 //ADD r12,r3,r10 forwaring II,expect r12=31
@0000_0034
000000_00101_01010_01101_00000_000001 //ADD r13,r5,r10 forwaring III,expect r13=27
@0000_0035
100011_00000_00010_0000000000000100  //LW R2,4(R0) expect R2=mem4=4
@0000_0036
000000_00010_00001_01111_00000_000001 //ADD R15,R1,R2 , (hazard detect)ensure nop operation expect r15=13
@0000_0037
001000_01111_01111_0000000000000001 //ADDI R15,R15,1  expect r15=14
@0000_0038
000100_01000_01001_0000000000000010 //beq R8,R9,0014 , should success
@0000_0039
000000_00110_00111_01110_00000_000001 //ADD r14,r6,r7 	

@0000_003b
000000_01000_01001_01110_00000_000001 //ADD r14,r8,r9, should take this, expect r14=22
@0000_003c
000011_00000000000000000001000001 //jump to 0020(hex)
@0000_003d
001000_00001_00001_0000000000000010 //ADDI r1,r1,2 should not take

@0000_0041
001000_00001_00001_0000000000000001 //ADDI r1,r1,1 expect r1=10
@0000_0042
000000_00000_00001_00001_00001_000111 //SLL r1,r1,1 expect r1=20
@0000_0043
000000_00000_00001_00001_00010_001000 //SRL r1,r1,2 expect r1=5
@0000_0044
000000_00001_00010_00001_00000_001001 //MUL r1,r1,r2 expect r1=20
@0000_0045
001001_00001_00001_0000000000001001 //SUBI r1,r1,9 expect r1=11
@0000_0046
000000_00001_00000_00001_00000_001010 //NOT r1 expect r1=111...0100
@0000_0047
101011_00000_00001_0000000000001000 //SW r1,8(R0)
@0000_0048
000000_01100_01011_00111_00000_001011 //sgt r7,r12,r11 expect r7=1
@0000_0049
101011_00000_00111_0000000000001000 //SW r7,8(R0)
@0000_004a
000000_00010_00110_00111_00000_001100 //NOR r7,r2,r6 expect r7=1010
@0000_004b
101011_00000_00111_0000000000001000 //SW r7,8(R0)
@0000_004c
000000_00010_00000_00010_00000_001010 //NOT r2
@0000_004d
000000_00011_00000_00011_00000_001010 //NOT r3
@0000_004e
000000_00100_00000_00100_00000_001010 //NOT r4
@0000_004f
000000_00101_00000_00101_00000_001010 //NOT r5
@0000_0050
000000_00110_00000_00110_00000_001010 //NOT r6
@0000_0051
000000_00111_00000_00111_00000_001010 //NOT r7
@0000_0052
000000_01000_00000_01000_00000_001010 //NOT r8
@0000_0053
000000_01001_00000_01001_00000_001010 //NOT r9
@0000_0054
000000_01010_00000_01010_00000_001010 //NOT r10
@0000_0055
000000_01011_00000_01011_00000_001010 //NOT r11
@0000_0056
000000_01100_00000_01100_00000_001010 //NOT r12
@0000_0057
000000_01101_00000_01101_00000_001010 //NOT r13
@0000_0058
000000_01110_00000_01110_00000_001010 //NOT r14
@0000_0059
000000_01111_00000_01111_00000_001010 //NOT r15
@0000_005A
000011_01000_00000_00000_00000_00000_0 //jump to far


@0100_0000
000000_00010_00000_00010_00000_001010 //NOT r2
@0100_0001
000000_00010_00000_00010_00000_001010 //NOT r2
@0100_0002
000000_00011_00000_00011_00000_001010 //NOT r3
@0100_0003
000000_00100_00000_00100_00000_001010 //NOT r4
@0100_0004
000000_00101_00000_00101_00000_001010 //NOT r5
@0100_0005
000000_00110_00000_00110_00000_001010 //NOT r6
@0100_0006
000000_00111_00000_00111_00000_001010 //NOT r7
@0100_0007
000000_01000_00000_01000_00000_001010 //NOT r8
@0100_0008
000000_01001_00000_01001_00000_001010 //NOT r9
@0100_0009
000000_01010_00000_01010_00000_001010 //NOT r10
@0100_000A
000000_01011_00000_01011_00000_001010 //NOT r11
@0100_000B
000000_01100_00000_01100_00000_001010 //NOT r12
@0100_000C
000000_01101_00000_01101_00000_001010 //NOT r13
@0100_000D
000000_01110_00000_01110_00000_001010 //NOT r14
@0100_000E
000000_01111_00000_01111_00000_001010 //NOT r15

@0100_000F
000011_00000_00000_00000_00000_00000_0 //jump to initial
